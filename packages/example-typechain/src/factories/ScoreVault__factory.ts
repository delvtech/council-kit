/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { ScoreVault, ScoreVaultInterface } from "../ScoreVault";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_winScoreChange",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_lossScoreChange",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: true,
        internalType: "enum ScoreVault.Result",
        name: "result",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "int256",
        name: "newScore",
        type: "int256",
      },
    ],
    name: "ScoreChange",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "enum ScoreVault.Result",
        name: "result",
        type: "uint8",
      },
    ],
    name: "addResult",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "lossScoreChange",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "queryVotePower",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "scores",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "winScoreChange",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60c060405234801561001057600080fd5b5060405161042d38038061042d83398101604081905261002f9161003d565b60809190915260a052610060565b6000806040838503121561004f578182fd5b505080516020909101519092909150565b60805160a0516103a261008b600039600061011801526000818160b8015261016301526103a26000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c8063d7282efb11610050578063d7282efb146100b3578063e91f3235146100da578063f097adaa1461011357610067565b806376dd110f1461006c578063998f9d0d1461009e575b600080fd5b61008c61007a366004610253565b60006020819052908152604090205481565b60405190815260200160405180910390f35b6100b16100ac366004610274565b61013a565b005b61008c7f000000000000000000000000000000000000000000000000000000000000000081565b61008c6100e83660046102ad565b50505073ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b61008c7f000000000000000000000000000000000000000000000000000000000000000081565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260208190526040812080547f0000000000000000000000000000000000000000000000000000000000000000929061018f90849061032f565b9091555081905060018111156101ce577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8316600081815260208181526040918290205491519182527f0d496d8c4d9d307b98eb6f737db6bce974c91d744497f6dae8550a0db0890752910160405180910390a35050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461024e57600080fd5b919050565b600060208284031215610264578081fd5b61026d8261022a565b9392505050565b60008060408385031215610286578081fd5b61028f8361022a565b91506020830135600281106102a2578182fd5b809150509250929050565b600080600080606085870312156102c2578182fd5b6102cb8561022a565b935060208501359250604085013567ffffffffffffffff808211156102ee578384fd5b818701915087601f830112610301578384fd5b81358181111561030f578485fd5b886020828501011115610320578485fd5b95989497505060200194505050565b60008219821115610367577f4e487b710000000000000000000000000000000000000000000000000000000081526011600452602481fd5b50019056fea264697066735822122043cb965c52337131a9fa4ffabb99ab11d29f67b4d82c72915087e8839a2f010564736f6c63430008030033";

type ScoreVaultConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ScoreVaultConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ScoreVault__factory extends ContractFactory {
  constructor(...args: ScoreVaultConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _winScoreChange: PromiseOrValue<BigNumberish>,
    _lossScoreChange: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ScoreVault> {
    return super.deploy(
      _winScoreChange,
      _lossScoreChange,
      overrides || {}
    ) as Promise<ScoreVault>;
  }
  override getDeployTransaction(
    _winScoreChange: PromiseOrValue<BigNumberish>,
    _lossScoreChange: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _winScoreChange,
      _lossScoreChange,
      overrides || {}
    );
  }
  override attach(address: string): ScoreVault {
    return super.attach(address) as ScoreVault;
  }
  override connect(signer: Signer): ScoreVault__factory {
    return super.connect(signer) as ScoreVault__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ScoreVaultInterface {
    return new utils.Interface(_abi) as ScoreVaultInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ScoreVault {
    return new Contract(address, _abi, signerOrProvider) as ScoreVault;
  }
}
