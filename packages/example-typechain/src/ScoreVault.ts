/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface ScoreVaultInterface extends utils.Interface {
  functions: {
    "addResult(address,uint8)": FunctionFragment;
    "lossScoreChange()": FunctionFragment;
    "queryVotePower(address,uint256,bytes)": FunctionFragment;
    "scores(address)": FunctionFragment;
    "winScoreChange()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addResult"
      | "addResult(address,uint8)"
      | "lossScoreChange"
      | "lossScoreChange()"
      | "queryVotePower"
      | "queryVotePower(address,uint256,bytes)"
      | "scores"
      | "scores(address)"
      | "winScoreChange"
      | "winScoreChange()"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addResult",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "addResult(address,uint8)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "lossScoreChange",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lossScoreChange()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "queryVotePower",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "queryVotePower(address,uint256,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "scores",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "scores(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "winScoreChange",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "winScoreChange()",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "addResult", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addResult(address,uint8)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lossScoreChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lossScoreChange()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queryVotePower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queryVotePower(address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "scores", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "scores(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "winScoreChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "winScoreChange()",
    data: BytesLike
  ): Result;

  events: {
    "ScoreChange(address,uint8,int256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ScoreChange"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ScoreChange(address,uint8,int256)"
  ): EventFragment;
}

export interface ScoreChangeEventObject {
  user: string;
  result: number;
  newScore: BigNumber;
}
export type ScoreChangeEvent = TypedEvent<
  [string, number, BigNumber],
  ScoreChangeEventObject
>;

export type ScoreChangeEventFilter = TypedEventFilter<ScoreChangeEvent>;

export interface ScoreVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ScoreVaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addResult(
      user: PromiseOrValue<string>,
      result: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "addResult(address,uint8)"(
      user: PromiseOrValue<string>,
      result: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    lossScoreChange(overrides?: CallOverrides): Promise<[BigNumber]>;

    "lossScoreChange()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    queryVotePower(
      user: PromiseOrValue<string>,
      blockNumber: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "queryVotePower(address,uint256,bytes)"(
      user: PromiseOrValue<string>,
      blockNumber: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    scores(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "scores(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    winScoreChange(overrides?: CallOverrides): Promise<[BigNumber]>;

    "winScoreChange()"(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  addResult(
    user: PromiseOrValue<string>,
    result: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "addResult(address,uint8)"(
    user: PromiseOrValue<string>,
    result: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  lossScoreChange(overrides?: CallOverrides): Promise<BigNumber>;

  "lossScoreChange()"(overrides?: CallOverrides): Promise<BigNumber>;

  queryVotePower(
    user: PromiseOrValue<string>,
    blockNumber: PromiseOrValue<BigNumberish>,
    arg2: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "queryVotePower(address,uint256,bytes)"(
    user: PromiseOrValue<string>,
    blockNumber: PromiseOrValue<BigNumberish>,
    arg2: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  scores(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "scores(address)"(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  winScoreChange(overrides?: CallOverrides): Promise<BigNumber>;

  "winScoreChange()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    addResult(
      user: PromiseOrValue<string>,
      result: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "addResult(address,uint8)"(
      user: PromiseOrValue<string>,
      result: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    lossScoreChange(overrides?: CallOverrides): Promise<BigNumber>;

    "lossScoreChange()"(overrides?: CallOverrides): Promise<BigNumber>;

    queryVotePower(
      user: PromiseOrValue<string>,
      blockNumber: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "queryVotePower(address,uint256,bytes)"(
      user: PromiseOrValue<string>,
      blockNumber: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    scores(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "scores(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    winScoreChange(overrides?: CallOverrides): Promise<BigNumber>;

    "winScoreChange()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "ScoreChange(address,uint8,int256)"(
      user?: PromiseOrValue<string> | null,
      result?: PromiseOrValue<BigNumberish> | null,
      newScore?: null
    ): ScoreChangeEventFilter;
    ScoreChange(
      user?: PromiseOrValue<string> | null,
      result?: PromiseOrValue<BigNumberish> | null,
      newScore?: null
    ): ScoreChangeEventFilter;
  };

  estimateGas: {
    addResult(
      user: PromiseOrValue<string>,
      result: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "addResult(address,uint8)"(
      user: PromiseOrValue<string>,
      result: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    lossScoreChange(overrides?: CallOverrides): Promise<BigNumber>;

    "lossScoreChange()"(overrides?: CallOverrides): Promise<BigNumber>;

    queryVotePower(
      user: PromiseOrValue<string>,
      blockNumber: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "queryVotePower(address,uint256,bytes)"(
      user: PromiseOrValue<string>,
      blockNumber: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    scores(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "scores(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    winScoreChange(overrides?: CallOverrides): Promise<BigNumber>;

    "winScoreChange()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addResult(
      user: PromiseOrValue<string>,
      result: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "addResult(address,uint8)"(
      user: PromiseOrValue<string>,
      result: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    lossScoreChange(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lossScoreChange()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    queryVotePower(
      user: PromiseOrValue<string>,
      blockNumber: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "queryVotePower(address,uint256,bytes)"(
      user: PromiseOrValue<string>,
      blockNumber: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    scores(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "scores(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    winScoreChange(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "winScoreChange()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
