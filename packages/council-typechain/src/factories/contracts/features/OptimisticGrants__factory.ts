/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  OptimisticGrants,
  OptimisticGrantsInterface,
} from "../../../contracts/features/OptimisticGrants";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_token",
        type: "address",
      },
      {
        internalType: "address",
        name: "__governance",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_destination",
        type: "address",
      },
    ],
    name: "claim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
      {
        internalType: "uint128",
        name: "_amount",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "_expiration",
        type: "uint128",
      },
    ],
    name: "configureGrant",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "grants",
    outputs: [
      {
        internalType: "uint128",
        name: "amount",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "expiration",
        type: "uint128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "solvency",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_recipient",
        type: "address",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b506040516109f03803806109f083398101604081905261002f91610064565b600080546001600160a01b0319166001600160a01b039290921691909117905560601b6001600160601b0319166080526100b5565b60008060408385031215610076578182fd5b82516100818161009d565b60208401519092506100928161009d565b809150509250929050565b6001600160a01b03811681146100b257600080fd5b50565b60805160601c6109086100e860003960008181610163015281816102ff0152818161049401526104fe01526109086000f3fe608060405234801561001057600080fd5b506004361061007c5760003560e01c8063b6b55f251161005b578063b6b55f25146100c5578063b869cea3146100d8578063d16649761461014b578063fc0c546a1461015e5761007c565b8062f714ce146100815780631e83409a14610096578063773c5049146100a9575b600080fd5b61009461008f366004610818565b6101aa565b005b6100946100a436600461077d565b610381565b6100b260015481565b6040519081526020015b60405180910390f35b6100946100d3366004610800565b6104c3565b6101226100e636600461077d565b6002602052600090815260409020546fffffffffffffffffffffffffffffffff8082169170010000000000000000000000000000000090041682565b604080516fffffffffffffffffffffffffffffffff9384168152929091166020830152016100bc565b61009461015936600461079e565b6105aa565b6101857f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100bc565b60005473ffffffffffffffffffffffffffffffffffffffff163314610230576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f21676f7665726e616e636500000000000000000000000000000000000000000060448201526064015b60405180910390fd5b60015482111561029c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f696e73756666696369656e742066756e647300000000000000000000000000006044820152606401610227565b81600160008282546102ae919061088c565b90915550506040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8281166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044015b602060405180830381600087803b15801561034457600080fd5b505af1158015610358573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037c91906107e0565b505050565b3360009081526002602052604090205470010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff16421015610420576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f6e6f74206d6174757265000000000000000000000000000000000000000000006044820152606401610227565b336000908152600260205260408082208054929055517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301526fffffffffffffffffffffffffffffffff90921660248201819052917f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb9060440161032a565b6040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906323b872dd90606401602060405180830381600087803b15801561055757600080fd5b505af115801561056b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058f91906107e0565b5080600160008282546105a29190610843565b909155505050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461062b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f21676f7665726e616e63650000000000000000000000000000000000000000006044820152606401610227565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600260205260409020546fffffffffffffffffffffffffffffffff9081169083168110156106a757610679818461085b565b6fffffffffffffffffffffffffffffffff166001600082825461069c919061088c565b909155506106da9050565b6106b1838261085b565b6fffffffffffffffffffffffffffffffff16600160008282546106d49190610843565b90915550505b5073ffffffffffffffffffffffffffffffffffffffff90921660009081526002602052604090206fffffffffffffffffffffffffffffffff9283167001000000000000000000000000000000000292909116919091179055565b803573ffffffffffffffffffffffffffffffffffffffff8116811461075857600080fd5b919050565b80356fffffffffffffffffffffffffffffffff8116811461075857600080fd5b60006020828403121561078e578081fd5b61079782610734565b9392505050565b6000806000606084860312156107b2578182fd5b6107bb84610734565b92506107c96020850161075d565b91506107d76040850161075d565b90509250925092565b6000602082840312156107f1578081fd5b81518015158114610797578182fd5b600060208284031215610811578081fd5b5035919050565b6000806040838503121561082a578182fd5b8235915061083a60208401610734565b90509250929050565b60008219821115610856576108566108a3565b500190565b60006fffffffffffffffffffffffffffffffff83811690831681811015610884576108846108a3565b039392505050565b60008282101561089e5761089e6108a3565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea2646970667358221220ccab291d2d30e29053f93b57347be56b88fd50381a2a94088f3e67c7141e612a64736f6c63430008030033";

type OptimisticGrantsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OptimisticGrantsConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OptimisticGrants__factory extends ContractFactory {
  constructor(...args: OptimisticGrantsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _token: PromiseOrValue<string>,
    __governance: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<OptimisticGrants> {
    return super.deploy(
      _token,
      __governance,
      overrides || {},
    ) as Promise<OptimisticGrants>;
  }
  override getDeployTransaction(
    _token: PromiseOrValue<string>,
    __governance: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(_token, __governance, overrides || {});
  }
  override attach(address: string): OptimisticGrants {
    return super.attach(address) as OptimisticGrants;
  }
  override connect(signer: Signer): OptimisticGrants__factory {
    return super.connect(signer) as OptimisticGrants__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OptimisticGrantsInterface {
    return new utils.Interface(_abi) as OptimisticGrantsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): OptimisticGrants {
    return new Contract(address, _abi, signerOrProvider) as OptimisticGrants;
  }
}
