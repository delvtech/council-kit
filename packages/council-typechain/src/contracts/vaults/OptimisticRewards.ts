/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface OptimisticRewardsInterface extends utils.Interface {
  functions: {
    "authorize(address)": FunctionFragment;
    "authorized(address)": FunctionFragment;
    "challengePeriod()": FunctionFragment;
    "challengeRewards()": FunctionFragment;
    "claim(uint256,uint256,bytes32[],address)": FunctionFragment;
    "claimAndDelegate(uint256,address,uint256,bytes32[],address)": FunctionFragment;
    "claimed(address)": FunctionFragment;
    "deauthorize(address)": FunctionFragment;
    "isAuthorized(address)": FunctionFragment;
    "lockingVault()": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingRoot()": FunctionFragment;
    "proposalTime()": FunctionFragment;
    "proposeRewards(bytes32)": FunctionFragment;
    "proposer()": FunctionFragment;
    "queryVotePower(address,uint256,bytes)": FunctionFragment;
    "rewardsRoot()": FunctionFragment;
    "setChallengePeriod(uint256)": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "setProposer(address)": FunctionFragment;
    "token()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "authorize"
      | "authorize(address)"
      | "authorized"
      | "authorized(address)"
      | "challengePeriod"
      | "challengePeriod()"
      | "challengeRewards"
      | "challengeRewards()"
      | "claim"
      | "claim(uint256,uint256,bytes32[],address)"
      | "claimAndDelegate"
      | "claimAndDelegate(uint256,address,uint256,bytes32[],address)"
      | "claimed"
      | "claimed(address)"
      | "deauthorize"
      | "deauthorize(address)"
      | "isAuthorized"
      | "isAuthorized(address)"
      | "lockingVault"
      | "lockingVault()"
      | "owner"
      | "owner()"
      | "pendingRoot"
      | "pendingRoot()"
      | "proposalTime"
      | "proposalTime()"
      | "proposeRewards"
      | "proposeRewards(bytes32)"
      | "proposer"
      | "proposer()"
      | "queryVotePower"
      | "queryVotePower(address,uint256,bytes)"
      | "rewardsRoot"
      | "rewardsRoot()"
      | "setChallengePeriod"
      | "setChallengePeriod(uint256)"
      | "setOwner"
      | "setOwner(address)"
      | "setProposer"
      | "setProposer(address)"
      | "token"
      | "token()",
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "authorize",
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: "authorize(address)",
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: "authorized",
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: "authorized(address)",
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: "challengePeriod",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "challengePeriod()",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "challengeRewards",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "challengeRewards()",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<string>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: "claim(uint256,uint256,bytes32[],address)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<string>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: "claimAndDelegate",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<string>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: "claimAndDelegate(uint256,address,uint256,bytes32[],address)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<string>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: "claimed",
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: "claimed(address)",
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: "deauthorize",
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: "deauthorize(address)",
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: "isAuthorized",
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: "isAuthorized(address)",
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: "lockingVault",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "lockingVault()",
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingRoot",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "pendingRoot()",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "proposalTime",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "proposalTime()",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "proposeRewards",
    values: [PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(
    functionFragment: "proposeRewards(bytes32)",
    values: [PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(functionFragment: "proposer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposer()",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "queryVotePower",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: "queryVotePower(address,uint256,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsRoot",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsRoot()",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "setChallengePeriod",
    values: [PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: "setChallengePeriod(uint256)",
    values: [PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: "setOwner",
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: "setOwner(address)",
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: "setProposer",
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: "setProposer(address)",
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(functionFragment: "token()", values?: undefined): string;

  decodeFunctionResult(functionFragment: "authorize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "authorize(address)",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "authorized", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "authorized(address)",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "challengePeriod",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "challengePeriod()",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "challengeRewards",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "challengeRewards()",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claim(uint256,uint256,bytes32[],address)",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimAndDelegate",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimAndDelegate(uint256,address,uint256,bytes32[],address)",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "claimed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimed(address)",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "deauthorize",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "deauthorize(address)",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorized",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorized(address)",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockingVault",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockingVault()",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingRoot",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingRoot()",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalTime",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalTime()",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeRewards",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeRewards(bytes32)",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "proposer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "proposer()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "queryVotePower",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "queryVotePower(address,uint256,bytes)",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsRoot",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsRoot()",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "setChallengePeriod",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "setChallengePeriod(uint256)",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setOwner(address)",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProposer",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProposer(address)",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token()", data: BytesLike): Result;

  events: {};
}

export interface OptimisticRewards extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OptimisticRewardsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    authorize(
      who: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    "authorize(address)"(
      who: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    authorized(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    "authorized(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    challengePeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    "challengePeriod()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    challengeRewards(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    "challengeRewards()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    claim(
      amount: PromiseOrValue<BigNumberish>,
      totalGrant: PromiseOrValue<BigNumberish>,
      merkleProof: PromiseOrValue<BytesLike>[],
      destination: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    "claim(uint256,uint256,bytes32[],address)"(
      amount: PromiseOrValue<BigNumberish>,
      totalGrant: PromiseOrValue<BigNumberish>,
      merkleProof: PromiseOrValue<BytesLike>[],
      destination: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    claimAndDelegate(
      amount: PromiseOrValue<BigNumberish>,
      delegate: PromiseOrValue<string>,
      totalGrant: PromiseOrValue<BigNumberish>,
      merkleProof: PromiseOrValue<BytesLike>[],
      destination: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    "claimAndDelegate(uint256,address,uint256,bytes32[],address)"(
      amount: PromiseOrValue<BigNumberish>,
      delegate: PromiseOrValue<string>,
      totalGrant: PromiseOrValue<BigNumberish>,
      merkleProof: PromiseOrValue<BytesLike>[],
      destination: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    claimed(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    "claimed(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    deauthorize(
      who: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    "deauthorize(address)"(
      who: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    isAuthorized(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    "isAuthorized(address)"(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    lockingVault(overrides?: CallOverrides): Promise<[string]>;

    "lockingVault()"(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    pendingRoot(overrides?: CallOverrides): Promise<[string]>;

    "pendingRoot()"(overrides?: CallOverrides): Promise<[string]>;

    proposalTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    "proposalTime()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    proposeRewards(
      newRoot: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    "proposeRewards(bytes32)"(
      newRoot: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    proposer(overrides?: CallOverrides): Promise<[string]>;

    "proposer()"(overrides?: CallOverrides): Promise<[string]>;

    queryVotePower(
      user: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      extraData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    "queryVotePower(address,uint256,bytes)"(
      user: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      extraData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    rewardsRoot(overrides?: CallOverrides): Promise<[string]>;

    "rewardsRoot()"(overrides?: CallOverrides): Promise<[string]>;

    setChallengePeriod(
      _challengePeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    "setChallengePeriod(uint256)"(
      _challengePeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setOwner(
      who: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    "setOwner(address)"(
      who: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setProposer(
      _proposer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    "setProposer(address)"(
      _proposer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    token(overrides?: CallOverrides): Promise<[string]>;

    "token()"(overrides?: CallOverrides): Promise<[string]>;
  };

  authorize(
    who: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  "authorize(address)"(
    who: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  authorized(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  "authorized(address)"(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  challengePeriod(overrides?: CallOverrides): Promise<BigNumber>;

  "challengePeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

  challengeRewards(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  "challengeRewards()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  claim(
    amount: PromiseOrValue<BigNumberish>,
    totalGrant: PromiseOrValue<BigNumberish>,
    merkleProof: PromiseOrValue<BytesLike>[],
    destination: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  "claim(uint256,uint256,bytes32[],address)"(
    amount: PromiseOrValue<BigNumberish>,
    totalGrant: PromiseOrValue<BigNumberish>,
    merkleProof: PromiseOrValue<BytesLike>[],
    destination: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  claimAndDelegate(
    amount: PromiseOrValue<BigNumberish>,
    delegate: PromiseOrValue<string>,
    totalGrant: PromiseOrValue<BigNumberish>,
    merkleProof: PromiseOrValue<BytesLike>[],
    destination: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  "claimAndDelegate(uint256,address,uint256,bytes32[],address)"(
    amount: PromiseOrValue<BigNumberish>,
    delegate: PromiseOrValue<string>,
    totalGrant: PromiseOrValue<BigNumberish>,
    merkleProof: PromiseOrValue<BytesLike>[],
    destination: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  claimed(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  "claimed(address)"(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  deauthorize(
    who: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  "deauthorize(address)"(
    who: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  isAuthorized(
    who: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  "isAuthorized(address)"(
    who: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  lockingVault(overrides?: CallOverrides): Promise<string>;

  "lockingVault()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pendingRoot(overrides?: CallOverrides): Promise<string>;

  "pendingRoot()"(overrides?: CallOverrides): Promise<string>;

  proposalTime(overrides?: CallOverrides): Promise<BigNumber>;

  "proposalTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  proposeRewards(
    newRoot: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  "proposeRewards(bytes32)"(
    newRoot: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  proposer(overrides?: CallOverrides): Promise<string>;

  "proposer()"(overrides?: CallOverrides): Promise<string>;

  queryVotePower(
    user: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    extraData: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  "queryVotePower(address,uint256,bytes)"(
    user: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    extraData: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  rewardsRoot(overrides?: CallOverrides): Promise<string>;

  "rewardsRoot()"(overrides?: CallOverrides): Promise<string>;

  setChallengePeriod(
    _challengePeriod: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  "setChallengePeriod(uint256)"(
    _challengePeriod: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setOwner(
    who: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  "setOwner(address)"(
    who: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setProposer(
    _proposer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  "setProposer(address)"(
    _proposer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  "token()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    authorize(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    "authorize(address)"(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    authorized(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    "authorized(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    challengePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "challengePeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    challengeRewards(overrides?: CallOverrides): Promise<void>;

    "challengeRewards()"(overrides?: CallOverrides): Promise<void>;

    claim(
      amount: PromiseOrValue<BigNumberish>,
      totalGrant: PromiseOrValue<BigNumberish>,
      merkleProof: PromiseOrValue<BytesLike>[],
      destination: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    "claim(uint256,uint256,bytes32[],address)"(
      amount: PromiseOrValue<BigNumberish>,
      totalGrant: PromiseOrValue<BigNumberish>,
      merkleProof: PromiseOrValue<BytesLike>[],
      destination: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    claimAndDelegate(
      amount: PromiseOrValue<BigNumberish>,
      delegate: PromiseOrValue<string>,
      totalGrant: PromiseOrValue<BigNumberish>,
      merkleProof: PromiseOrValue<BytesLike>[],
      destination: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    "claimAndDelegate(uint256,address,uint256,bytes32[],address)"(
      amount: PromiseOrValue<BigNumberish>,
      delegate: PromiseOrValue<string>,
      totalGrant: PromiseOrValue<BigNumberish>,
      merkleProof: PromiseOrValue<BytesLike>[],
      destination: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    claimed(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    "claimed(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    deauthorize(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    "deauthorize(address)"(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    isAuthorized(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    "isAuthorized(address)"(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    lockingVault(overrides?: CallOverrides): Promise<string>;

    "lockingVault()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pendingRoot(overrides?: CallOverrides): Promise<string>;

    "pendingRoot()"(overrides?: CallOverrides): Promise<string>;

    proposalTime(overrides?: CallOverrides): Promise<BigNumber>;

    "proposalTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    proposeRewards(
      newRoot: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    "proposeRewards(bytes32)"(
      newRoot: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    proposer(overrides?: CallOverrides): Promise<string>;

    "proposer()"(overrides?: CallOverrides): Promise<string>;

    queryVotePower(
      user: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      extraData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    "queryVotePower(address,uint256,bytes)"(
      user: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      extraData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    rewardsRoot(overrides?: CallOverrides): Promise<string>;

    "rewardsRoot()"(overrides?: CallOverrides): Promise<string>;

    setChallengePeriod(
      _challengePeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    "setChallengePeriod(uint256)"(
      _challengePeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setOwner(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    "setOwner(address)"(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setProposer(
      _proposer: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    "setProposer(address)"(
      _proposer: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    token(overrides?: CallOverrides): Promise<string>;

    "token()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    authorize(
      who: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    "authorize(address)"(
      who: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    authorized(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    "authorized(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    challengePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "challengePeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    challengeRewards(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    "challengeRewards()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    claim(
      amount: PromiseOrValue<BigNumberish>,
      totalGrant: PromiseOrValue<BigNumberish>,
      merkleProof: PromiseOrValue<BytesLike>[],
      destination: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    "claim(uint256,uint256,bytes32[],address)"(
      amount: PromiseOrValue<BigNumberish>,
      totalGrant: PromiseOrValue<BigNumberish>,
      merkleProof: PromiseOrValue<BytesLike>[],
      destination: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    claimAndDelegate(
      amount: PromiseOrValue<BigNumberish>,
      delegate: PromiseOrValue<string>,
      totalGrant: PromiseOrValue<BigNumberish>,
      merkleProof: PromiseOrValue<BytesLike>[],
      destination: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    "claimAndDelegate(uint256,address,uint256,bytes32[],address)"(
      amount: PromiseOrValue<BigNumberish>,
      delegate: PromiseOrValue<string>,
      totalGrant: PromiseOrValue<BigNumberish>,
      merkleProof: PromiseOrValue<BytesLike>[],
      destination: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    claimed(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    "claimed(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    deauthorize(
      who: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    "deauthorize(address)"(
      who: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    isAuthorized(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    "isAuthorized(address)"(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    lockingVault(overrides?: CallOverrides): Promise<BigNumber>;

    "lockingVault()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pendingRoot(overrides?: CallOverrides): Promise<BigNumber>;

    "pendingRoot()"(overrides?: CallOverrides): Promise<BigNumber>;

    proposalTime(overrides?: CallOverrides): Promise<BigNumber>;

    "proposalTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    proposeRewards(
      newRoot: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    "proposeRewards(bytes32)"(
      newRoot: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    proposer(overrides?: CallOverrides): Promise<BigNumber>;

    "proposer()"(overrides?: CallOverrides): Promise<BigNumber>;

    queryVotePower(
      user: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      extraData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    "queryVotePower(address,uint256,bytes)"(
      user: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      extraData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    rewardsRoot(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardsRoot()"(overrides?: CallOverrides): Promise<BigNumber>;

    setChallengePeriod(
      _challengePeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    "setChallengePeriod(uint256)"(
      _challengePeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setOwner(
      who: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    "setOwner(address)"(
      who: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setProposer(
      _proposer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    "setProposer(address)"(
      _proposer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    "token()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    authorize(
      who: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    "authorize(address)"(
      who: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    authorized(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    "authorized(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    challengePeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "challengePeriod()"(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    challengeRewards(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    "challengeRewards()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    claim(
      amount: PromiseOrValue<BigNumberish>,
      totalGrant: PromiseOrValue<BigNumberish>,
      merkleProof: PromiseOrValue<BytesLike>[],
      destination: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    "claim(uint256,uint256,bytes32[],address)"(
      amount: PromiseOrValue<BigNumberish>,
      totalGrant: PromiseOrValue<BigNumberish>,
      merkleProof: PromiseOrValue<BytesLike>[],
      destination: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    claimAndDelegate(
      amount: PromiseOrValue<BigNumberish>,
      delegate: PromiseOrValue<string>,
      totalGrant: PromiseOrValue<BigNumberish>,
      merkleProof: PromiseOrValue<BytesLike>[],
      destination: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    "claimAndDelegate(uint256,address,uint256,bytes32[],address)"(
      amount: PromiseOrValue<BigNumberish>,
      delegate: PromiseOrValue<string>,
      totalGrant: PromiseOrValue<BigNumberish>,
      merkleProof: PromiseOrValue<BytesLike>[],
      destination: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    claimed(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    "claimed(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    deauthorize(
      who: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    "deauthorize(address)"(
      who: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    isAuthorized(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    "isAuthorized(address)"(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    lockingVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lockingVault()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pendingRoot()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposalTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "proposalTime()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposeRewards(
      newRoot: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    "proposeRewards(bytes32)"(
      newRoot: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    proposer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "proposer()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queryVotePower(
      user: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      extraData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    "queryVotePower(address,uint256,bytes)"(
      user: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      extraData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    rewardsRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rewardsRoot()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setChallengePeriod(
      _challengePeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    "setChallengePeriod(uint256)"(
      _challengePeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setOwner(
      who: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    "setOwner(address)"(
      who: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setProposer(
      _proposer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    "setProposer(address)"(
      _proposer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "token()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
