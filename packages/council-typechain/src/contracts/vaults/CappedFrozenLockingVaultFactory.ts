/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface CappedFrozenLockingVaultFactoryInterface
  extends utils.Interface {
  functions: {
    "createCappedFrozenLockingVault(address,uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createCappedFrozenLockingVault"
      | "createCappedFrozenLockingVault(address,uint256,uint256)",
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createCappedFrozenLockingVault",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: "createCappedFrozenLockingVault(address,uint256,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;

  decodeFunctionResult(
    functionFragment: "createCappedFrozenLockingVault",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCappedFrozenLockingVault(address,uint256,uint256)",
    data: BytesLike,
  ): Result;

  events: {
    "CappedFrozenLockingVaultCreated(address,address,uint256,uint256)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "CappedFrozenLockingVaultCreated",
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "CappedFrozenLockingVaultCreated(address,address,uint256,uint256)",
  ): EventFragment;
}

export interface CappedFrozenLockingVaultCreatedEventObject {
  vaultAddress: string;
  token: string;
  staleBlockLag: BigNumber;
  lockBalance: BigNumber;
}
export type CappedFrozenLockingVaultCreatedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  CappedFrozenLockingVaultCreatedEventObject
>;

export type CappedFrozenLockingVaultCreatedEventFilter =
  TypedEventFilter<CappedFrozenLockingVaultCreatedEvent>;

export interface CappedFrozenLockingVaultFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CappedFrozenLockingVaultFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createCappedFrozenLockingVault(
      _token: PromiseOrValue<string>,
      _staleBlockLag: PromiseOrValue<BigNumberish>,
      _lockBalance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    "createCappedFrozenLockingVault(address,uint256,uint256)"(
      _token: PromiseOrValue<string>,
      _staleBlockLag: PromiseOrValue<BigNumberish>,
      _lockBalance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  createCappedFrozenLockingVault(
    _token: PromiseOrValue<string>,
    _staleBlockLag: PromiseOrValue<BigNumberish>,
    _lockBalance: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  "createCappedFrozenLockingVault(address,uint256,uint256)"(
    _token: PromiseOrValue<string>,
    _staleBlockLag: PromiseOrValue<BigNumberish>,
    _lockBalance: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    createCappedFrozenLockingVault(
      _token: PromiseOrValue<string>,
      _staleBlockLag: PromiseOrValue<BigNumberish>,
      _lockBalance: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<string>;

    "createCappedFrozenLockingVault(address,uint256,uint256)"(
      _token: PromiseOrValue<string>,
      _staleBlockLag: PromiseOrValue<BigNumberish>,
      _lockBalance: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<string>;
  };

  filters: {
    "CappedFrozenLockingVaultCreated(address,address,uint256,uint256)"(
      vaultAddress?: null,
      token?: null,
      staleBlockLag?: null,
      lockBalance?: null,
    ): CappedFrozenLockingVaultCreatedEventFilter;
    CappedFrozenLockingVaultCreated(
      vaultAddress?: null,
      token?: null,
      staleBlockLag?: null,
      lockBalance?: null,
    ): CappedFrozenLockingVaultCreatedEventFilter;
  };

  estimateGas: {
    createCappedFrozenLockingVault(
      _token: PromiseOrValue<string>,
      _staleBlockLag: PromiseOrValue<BigNumberish>,
      _lockBalance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    "createCappedFrozenLockingVault(address,uint256,uint256)"(
      _token: PromiseOrValue<string>,
      _staleBlockLag: PromiseOrValue<BigNumberish>,
      _lockBalance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createCappedFrozenLockingVault(
      _token: PromiseOrValue<string>,
      _staleBlockLag: PromiseOrValue<BigNumberish>,
      _lockBalance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    "createCappedFrozenLockingVault(address,uint256,uint256)"(
      _token: PromiseOrValue<string>,
      _staleBlockLag: PromiseOrValue<BigNumberish>,
      _lockBalance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
